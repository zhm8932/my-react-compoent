const klassName = require('./util/className');
const {removeClass, hasClass, addClass, getClassList} = require('./util/dom');
const DocumentClickMixin = require('./mixin/DocumentClickMixin');

const Menu = React.createClass({
    mixins:[DocumentClickMixin],
    getDefaultProps() {
        return {
            accordion: false,
            popped: false,
            horizontal: false,
            mode: 'click',
            className: '',
        };
    },
    getInitialState(){
      const {current} = this.props;
        return {current};


    },
    toggleSubMenu(index){
        let {popped,horizontal,accordion} = this.props;
        const node = ReactDOM.findDOMNode(this.refs[index]);
        const active = hasClass(node,'_active');
        console.log("active:",active,"node:",node,"index:",index)
        if(accordion ||popped||horizontal){
            const baseNode = ReactDOM.findDOMNode(this.refs.base);
            removeClass(baseNode.querySelectorAll('.sub-menu'),'_active');
        }
        active?removeClass(node,'_active'):addClass(node,'_active')
        return false;

    },
    formatSubMenu(node,i,{popped,accordion,mode,current,horizontal,level}){  //还有下级菜单

        let {title, index, disabled, active, children} = node.props;
        // console.log("node:",node,"::---------children.props:",children.props);

        // let className = [];
        let className = getClassList(node.props);
        className.push('_item','sub-menu')

        if(active) className.push('_active');
        className = className.join(' ')
        const childNodes = <Menu {...children.props} disabled={disabled} mode={mode} level={level} horizontal={horizontal} accordion={accordion} popped={popped} current={current} onChange={this.handleItemClick}>
                                {children.props.children}
                            </Menu>
        if(mode ==='hover' || horizontal){
            return  <li className={className} key={`item-${i}`} ref={index}>
                        <span className="_title _item" onClick={()=>{this.toggleSubMenu(index)}}>{title}</span>
                        {childNodes}
                    </li>
        }
        return (
            <li className={className} key={`item-${i}`} ref={index}>
                <span className='_title _item' onClick={()=>{this.toggleSubMenu(index)}}>{title}</span>
                {childNodes}
            </li>
        )
    },
    closeSubMenu(node){
        const {popped, mode, horizontal} = this.props;
        if (popped || mode === 'hover' || horizontal) {
            let base = node || ReactDOM.findDOMNode(this.refs.base);
            removeClass(base.querySelectorAll('.sub-menu._active'), '_active');
        }
    },
    handleItemClick(index,disabled){

        if (disabled) return;
        const {onChange} = this.props;
        if (onChange) onChange(index);
        this.setState({
            current: index,
        }, () => this.closeSubMenu());
    },
    formatChild(node,i,{current}){  //只有一级菜单
        let {disabled,index,children} = node.props;
        const selected = current ===index;
        // let className = [];
        let className = getClassList(node.props);
        className.push('_child','_item');
        if(selected) {className.push('_active')}
        if(disabled) {className.push('_disabled')}
        className = className.join(' ');
        // console.log("children:::",children)

        return <li className={className} key={`item-${i}`} onClick={()=>{this.handleItemClick(index,disabled)}}>{children}</li>
    },
    formatMenu(children,level){
        const {current} = this.state;
        const {popped,accordion,mode,horizontal} = this.props;
        return React.Children.map(children,(item,i)=>{
            let {index,sub}  = item.props;
            console.log(`item ${i} :`,item.props,"--------index:",index,"---------sub:",sub)
            if(index===null||index===undefined){
                throw new Error('index is needed for children of menu')
            }

            return sub ? this.formatSubMenu(item,i,{accordion,popped,mode,current,horizontal,level})
                       // : <li>这里没有子集的{i}</li>
                       : this.formatChild(item,i,{current})
        })
    },
    render(){
        let {children,style,className,horizontal,popped,mode,level=0} = this.props;
        //menu deep level
        level = level + 1;

        // console.log("level:",level)
        // className =klassName(className,`menu _menu-${level}`)
        className =klassName(className,`menu _menu-${level}`)

        if(popped) className +=' _popped';
        if(horizontal) className +=' _horizontal';
        if(!horizontal&&popped) className +=' _defalut';


        const menuNode = (mode ==='hover'&&popped)||horizontal
            ? <ul ref="base" style={style} className={`menu ${className} _hover`}>{this.formatMenu(children,level)}</ul>
            : <ul ref="base" style={style} className={className}>{this.formatMenu(children,level)}</ul>

        // console.log("children:",children);
        // const menuNode = <ul className={className}>{this.formatMenu(children,level)}</ul>
        return(
            menuNode
        )
    }
})

module.exports = Menu;